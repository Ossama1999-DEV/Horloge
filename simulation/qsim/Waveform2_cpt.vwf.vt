// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2024 16:31:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cpt_dcpt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpt_dcpt_vlg_sample_tst(
	clk,
	dh,
	dm,
	enable,
	mode,
	reset,
	start,
	uh,
	um,
	sampler_tx
);
input  clk;
input [3:0] dh;
input [3:0] dm;
input  enable;
input  mode;
input  reset;
input  start;
input [3:0] uh;
input [3:0] um;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dh or dm or enable or mode or reset or start or uh or um)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cpt_dcpt_vlg_check_tst (
	alarme,
	h1,
	h2,
	m1,
	m2,
	s1,
	s2,
	sampler_rx
);
input  alarme;
input [3:0] h1;
input [3:0] h2;
input [3:0] m1;
input [3:0] m2;
input [3:0] s1;
input [3:0] s2;
input sampler_rx;

reg  alarme_expected;
reg [3:0] h1_expected;
reg [3:0] h2_expected;
reg [3:0] m1_expected;
reg [3:0] m2_expected;
reg [3:0] s1_expected;
reg [3:0] s2_expected;

reg  alarme_prev;
reg [3:0] h1_prev;
reg [3:0] h2_prev;
reg [3:0] m1_prev;
reg [3:0] m2_prev;
reg [3:0] s1_prev;
reg [3:0] s2_prev;

reg  alarme_expected_prev;
reg [3:0] h1_expected_prev;
reg [3:0] h2_expected_prev;
reg [3:0] m1_expected_prev;
reg [3:0] m2_expected_prev;
reg [3:0] s1_expected_prev;
reg [3:0] s2_expected_prev;

reg  last_alarme_exp;
reg [3:0] last_h1_exp;
reg [3:0] last_h2_exp;
reg [3:0] last_m1_exp;
reg [3:0] last_m2_exp;
reg [3:0] last_s1_exp;
reg [3:0] last_s2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarme_prev = alarme;
	h1_prev = h1;
	h2_prev = h2;
	m1_prev = m1;
	m2_prev = m2;
	s1_prev = s1;
	s2_prev = s2;
end

// update expected /o prevs

always @(trigger)
begin
	alarme_expected_prev = alarme_expected;
	h1_expected_prev = h1_expected;
	h2_expected_prev = h2_expected;
	m1_expected_prev = m1_expected;
	m2_expected_prev = m2_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
end


// expected s1[ 3 ]
initial
begin
	s1_expected[3] = 1'bX;
end 
// expected s1[ 2 ]
initial
begin
	s1_expected[2] = 1'bX;
end 
// expected s1[ 1 ]
initial
begin
	s1_expected[1] = 1'bX;
end 
// expected s1[ 0 ]
initial
begin
	s1_expected[0] = 1'bX;
end 
// expected s2[ 3 ]
initial
begin
	s2_expected[3] = 1'bX;
end 
// expected s2[ 2 ]
initial
begin
	s2_expected[2] = 1'bX;
end 
// expected s2[ 1 ]
initial
begin
	s2_expected[1] = 1'bX;
end 
// expected s2[ 0 ]
initial
begin
	s2_expected[0] = 1'bX;
end 
// expected m1[ 3 ]
initial
begin
	m1_expected[3] = 1'bX;
end 
// expected m1[ 2 ]
initial
begin
	m1_expected[2] = 1'bX;
end 
// expected m1[ 1 ]
initial
begin
	m1_expected[1] = 1'bX;
end 
// expected m1[ 0 ]
initial
begin
	m1_expected[0] = 1'bX;
end 
// expected m2[ 3 ]
initial
begin
	m2_expected[3] = 1'bX;
end 
// expected m2[ 2 ]
initial
begin
	m2_expected[2] = 1'bX;
end 
// expected m2[ 1 ]
initial
begin
	m2_expected[1] = 1'bX;
end 
// expected m2[ 0 ]
initial
begin
	m2_expected[0] = 1'bX;
end 
// expected h1[ 3 ]
initial
begin
	h1_expected[3] = 1'bX;
end 
// expected h1[ 2 ]
initial
begin
	h1_expected[2] = 1'bX;
end 
// expected h1[ 1 ]
initial
begin
	h1_expected[1] = 1'bX;
end 
// expected h1[ 0 ]
initial
begin
	h1_expected[0] = 1'bX;
end 
// expected h2[ 3 ]
initial
begin
	h2_expected[3] = 1'bX;
end 
// expected h2[ 2 ]
initial
begin
	h2_expected[2] = 1'bX;
end 
// expected h2[ 1 ]
initial
begin
	h2_expected[1] = 1'bX;
end 
// expected h2[ 0 ]
initial
begin
	h2_expected[0] = 1'bX;
end 

// expected alarme
initial
begin
	alarme_expected = 1'bX;
end 
// generate trigger
always @(alarme_expected or alarme or h1_expected or h1 or h2_expected or h2 or m1_expected or m1 or m2_expected or m2 or s1_expected or s1 or s2_expected or s2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarme = %b | expected h1 = %b | expected h2 = %b | expected m1 = %b | expected m2 = %b | expected s1 = %b | expected s2 = %b | ",alarme_expected_prev,h1_expected_prev,h2_expected_prev,m1_expected_prev,m2_expected_prev,s1_expected_prev,s2_expected_prev);
	$display("| real alarme = %b | real h1 = %b | real h2 = %b | real m1 = %b | real m2 = %b | real s1 = %b | real s2 = %b | ",alarme_prev,h1_prev,h2_prev,m1_prev,m2_prev,s1_prev,s2_prev);
`endif
	if (
		( alarme_expected_prev !== 1'bx ) && ( alarme_prev !== alarme_expected_prev )
		&& ((alarme_expected_prev !== last_alarme_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarme :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarme_expected_prev);
		$display ("     Real value = %b", alarme_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarme_exp = alarme_expected_prev;
	end
	if (
		( h1_expected_prev[0] !== 1'bx ) && ( h1_prev[0] !== h1_expected_prev[0] )
		&& ((h1_expected_prev[0] !== last_h1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h1_expected_prev);
		$display ("     Real value = %b", h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_h1_exp[0] = h1_expected_prev[0];
	end
	if (
		( h1_expected_prev[1] !== 1'bx ) && ( h1_prev[1] !== h1_expected_prev[1] )
		&& ((h1_expected_prev[1] !== last_h1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h1_expected_prev);
		$display ("     Real value = %b", h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_h1_exp[1] = h1_expected_prev[1];
	end
	if (
		( h1_expected_prev[2] !== 1'bx ) && ( h1_prev[2] !== h1_expected_prev[2] )
		&& ((h1_expected_prev[2] !== last_h1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h1_expected_prev);
		$display ("     Real value = %b", h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_h1_exp[2] = h1_expected_prev[2];
	end
	if (
		( h1_expected_prev[3] !== 1'bx ) && ( h1_prev[3] !== h1_expected_prev[3] )
		&& ((h1_expected_prev[3] !== last_h1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h1_expected_prev);
		$display ("     Real value = %b", h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_h1_exp[3] = h1_expected_prev[3];
	end
	if (
		( h2_expected_prev[0] !== 1'bx ) && ( h2_prev[0] !== h2_expected_prev[0] )
		&& ((h2_expected_prev[0] !== last_h2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h2_expected_prev);
		$display ("     Real value = %b", h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_h2_exp[0] = h2_expected_prev[0];
	end
	if (
		( h2_expected_prev[1] !== 1'bx ) && ( h2_prev[1] !== h2_expected_prev[1] )
		&& ((h2_expected_prev[1] !== last_h2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h2_expected_prev);
		$display ("     Real value = %b", h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_h2_exp[1] = h2_expected_prev[1];
	end
	if (
		( h2_expected_prev[2] !== 1'bx ) && ( h2_prev[2] !== h2_expected_prev[2] )
		&& ((h2_expected_prev[2] !== last_h2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h2_expected_prev);
		$display ("     Real value = %b", h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_h2_exp[2] = h2_expected_prev[2];
	end
	if (
		( h2_expected_prev[3] !== 1'bx ) && ( h2_prev[3] !== h2_expected_prev[3] )
		&& ((h2_expected_prev[3] !== last_h2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h2_expected_prev);
		$display ("     Real value = %b", h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_h2_exp[3] = h2_expected_prev[3];
	end
	if (
		( m1_expected_prev[0] !== 1'bx ) && ( m1_prev[0] !== m1_expected_prev[0] )
		&& ((m1_expected_prev[0] !== last_m1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_m1_exp[0] = m1_expected_prev[0];
	end
	if (
		( m1_expected_prev[1] !== 1'bx ) && ( m1_prev[1] !== m1_expected_prev[1] )
		&& ((m1_expected_prev[1] !== last_m1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_m1_exp[1] = m1_expected_prev[1];
	end
	if (
		( m1_expected_prev[2] !== 1'bx ) && ( m1_prev[2] !== m1_expected_prev[2] )
		&& ((m1_expected_prev[2] !== last_m1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_m1_exp[2] = m1_expected_prev[2];
	end
	if (
		( m1_expected_prev[3] !== 1'bx ) && ( m1_prev[3] !== m1_expected_prev[3] )
		&& ((m1_expected_prev[3] !== last_m1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_m1_exp[3] = m1_expected_prev[3];
	end
	if (
		( m2_expected_prev[0] !== 1'bx ) && ( m2_prev[0] !== m2_expected_prev[0] )
		&& ((m2_expected_prev[0] !== last_m2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_m2_exp[0] = m2_expected_prev[0];
	end
	if (
		( m2_expected_prev[1] !== 1'bx ) && ( m2_prev[1] !== m2_expected_prev[1] )
		&& ((m2_expected_prev[1] !== last_m2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_m2_exp[1] = m2_expected_prev[1];
	end
	if (
		( m2_expected_prev[2] !== 1'bx ) && ( m2_prev[2] !== m2_expected_prev[2] )
		&& ((m2_expected_prev[2] !== last_m2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_m2_exp[2] = m2_expected_prev[2];
	end
	if (
		( m2_expected_prev[3] !== 1'bx ) && ( m2_prev[3] !== m2_expected_prev[3] )
		&& ((m2_expected_prev[3] !== last_m2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_m2_exp[3] = m2_expected_prev[3];
	end
	if (
		( s1_expected_prev[0] !== 1'bx ) && ( s1_prev[0] !== s1_expected_prev[0] )
		&& ((s1_expected_prev[0] !== last_s1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s1_exp[0] = s1_expected_prev[0];
	end
	if (
		( s1_expected_prev[1] !== 1'bx ) && ( s1_prev[1] !== s1_expected_prev[1] )
		&& ((s1_expected_prev[1] !== last_s1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s1_exp[1] = s1_expected_prev[1];
	end
	if (
		( s1_expected_prev[2] !== 1'bx ) && ( s1_prev[2] !== s1_expected_prev[2] )
		&& ((s1_expected_prev[2] !== last_s1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s1_exp[2] = s1_expected_prev[2];
	end
	if (
		( s1_expected_prev[3] !== 1'bx ) && ( s1_prev[3] !== s1_expected_prev[3] )
		&& ((s1_expected_prev[3] !== last_s1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s1_exp[3] = s1_expected_prev[3];
	end
	if (
		( s2_expected_prev[0] !== 1'bx ) && ( s2_prev[0] !== s2_expected_prev[0] )
		&& ((s2_expected_prev[0] !== last_s2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s2_exp[0] = s2_expected_prev[0];
	end
	if (
		( s2_expected_prev[1] !== 1'bx ) && ( s2_prev[1] !== s2_expected_prev[1] )
		&& ((s2_expected_prev[1] !== last_s2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s2_exp[1] = s2_expected_prev[1];
	end
	if (
		( s2_expected_prev[2] !== 1'bx ) && ( s2_prev[2] !== s2_expected_prev[2] )
		&& ((s2_expected_prev[2] !== last_s2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s2_exp[2] = s2_expected_prev[2];
	end
	if (
		( s2_expected_prev[3] !== 1'bx ) && ( s2_prev[3] !== s2_expected_prev[3] )
		&& ((s2_expected_prev[3] !== last_s2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s2_exp[3] = s2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cpt_dcpt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] dh;
reg [3:0] dm;
reg enable;
reg mode;
reg reset;
reg start;
reg [3:0] uh;
reg [3:0] um;
// wires                                               
wire alarme;
wire [3:0] h1;
wire [3:0] h2;
wire [3:0] m1;
wire [3:0] m2;
wire [3:0] s1;
wire [3:0] s2;

wire sampler;                             

// assign statements (if any)                          
cpt_dcpt i1 (
// port map - connection between master ports and signals/registers   
	.alarme(alarme),
	.clk(clk),
	.dh(dh),
	.dm(dm),
	.enable(enable),
	.h1(h1),
	.h2(h2),
	.m1(m1),
	.m2(m2),
	.mode(mode),
	.reset(reset),
	.s1(s1),
	.s2(s2),
	.start(start),
	.uh(uh),
	.um(um)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// mode
initial
begin
	mode = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #140000 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
end 
// um[ 3 ]
initial
begin
	um[3] = 1'b0;
end 
// um[ 2 ]
initial
begin
	um[2] = 1'b0;
end 
// um[ 1 ]
initial
begin
	um[1] = 1'b0;
end 
// um[ 0 ]
initial
begin
	um[0] = 1'b0;
end 
// dm[ 3 ]
initial
begin
	dm[3] = 1'b0;
end 
// dm[ 2 ]
initial
begin
	dm[2] = 1'b1;
end 
// dm[ 1 ]
initial
begin
	dm[1] = 1'b0;
end 
// dm[ 0 ]
initial
begin
	dm[0] = 1'b1;
end 
// uh[ 3 ]
initial
begin
	uh[3] = 1'b0;
end 
// uh[ 2 ]
initial
begin
	uh[2] = 1'b0;
end 
// uh[ 1 ]
initial
begin
	uh[1] = 1'b0;
end 
// uh[ 0 ]
initial
begin
	uh[0] = 1'b0;
end 
// dh[ 3 ]
initial
begin
	dh[3] = 1'b0;
end 
// dh[ 2 ]
initial
begin
	dh[2] = 1'b0;
end 
// dh[ 1 ]
initial
begin
	dh[1] = 1'b0;
end 
// dh[ 0 ]
initial
begin
	dh[0] = 1'b0;
end 

cpt_dcpt_vlg_sample_tst tb_sample (
	.clk(clk),
	.dh(dh),
	.dm(dm),
	.enable(enable),
	.mode(mode),
	.reset(reset),
	.start(start),
	.uh(uh),
	.um(um),
	.sampler_tx(sampler)
);

cpt_dcpt_vlg_check_tst tb_out(
	.alarme(alarme),
	.h1(h1),
	.h2(h2),
	.m1(m1),
	.m2(m2),
	.s1(s1),
	.s2(s2),
	.sampler_rx(sampler)
);
endmodule

