// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2024 16:24:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Top_Level
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Top_Level_vlg_sample_tst(
	clk,
	dh,
	dm,
	enable,
	mode,
	reset,
	start,
	uh,
	um,
	sampler_tx
);
input  clk;
input [3:0] dh;
input [3:0] dm;
input  enable;
input  mode;
input  reset;
input  start;
input [3:0] uh;
input [3:0] um;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dh or dm or enable or mode or reset or start or uh or um)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Top_Level_vlg_check_tst (
	alarme,
	seg_h1,
	seg_h2,
	seg_m1,
	seg_m2,
	seg_s1,
	seg_s2,
	sampler_rx
);
input  alarme;
input [6:0] seg_h1;
input [6:0] seg_h2;
input [6:0] seg_m1;
input [6:0] seg_m2;
input [6:0] seg_s1;
input [6:0] seg_s2;
input sampler_rx;

reg  alarme_expected;
reg [6:0] seg_h1_expected;
reg [6:0] seg_h2_expected;
reg [6:0] seg_m1_expected;
reg [6:0] seg_m2_expected;
reg [6:0] seg_s1_expected;
reg [6:0] seg_s2_expected;

reg  alarme_prev;
reg [6:0] seg_h1_prev;
reg [6:0] seg_h2_prev;
reg [6:0] seg_m1_prev;
reg [6:0] seg_m2_prev;
reg [6:0] seg_s1_prev;
reg [6:0] seg_s2_prev;

reg  alarme_expected_prev;
reg [6:0] seg_h1_expected_prev;
reg [6:0] seg_h2_expected_prev;
reg [6:0] seg_m1_expected_prev;
reg [6:0] seg_m2_expected_prev;
reg [6:0] seg_s1_expected_prev;
reg [6:0] seg_s2_expected_prev;

reg  last_alarme_exp;
reg [6:0] last_seg_h1_exp;
reg [6:0] last_seg_h2_exp;
reg [6:0] last_seg_m1_exp;
reg [6:0] last_seg_m2_exp;
reg [6:0] last_seg_s1_exp;
reg [6:0] last_seg_s2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarme_prev = alarme;
	seg_h1_prev = seg_h1;
	seg_h2_prev = seg_h2;
	seg_m1_prev = seg_m1;
	seg_m2_prev = seg_m2;
	seg_s1_prev = seg_s1;
	seg_s2_prev = seg_s2;
end

// update expected /o prevs

always @(trigger)
begin
	alarme_expected_prev = alarme_expected;
	seg_h1_expected_prev = seg_h1_expected;
	seg_h2_expected_prev = seg_h2_expected;
	seg_m1_expected_prev = seg_m1_expected;
	seg_m2_expected_prev = seg_m2_expected;
	seg_s1_expected_prev = seg_s1_expected;
	seg_s2_expected_prev = seg_s2_expected;
end


// expected seg_s1[ 6 ]
initial
begin
	seg_s1_expected[6] = 1'bX;
	seg_s1_expected[6] = #999000 1'b0;
end 
// expected seg_s1[ 5 ]
initial
begin
	seg_s1_expected[5] = 1'bX;
	seg_s1_expected[5] = #999000 1'b0;
end 
// expected seg_s1[ 4 ]
initial
begin
	seg_s1_expected[4] = 1'bX;
	seg_s1_expected[4] = #999000 1'b0;
end 
// expected seg_s1[ 3 ]
initial
begin
	seg_s1_expected[3] = 1'bX;
	seg_s1_expected[3] = #999000 1'b0;
end 
// expected seg_s1[ 2 ]
initial
begin
	seg_s1_expected[2] = 1'bX;
	seg_s1_expected[2] = #999000 1'b0;
end 
// expected seg_s1[ 1 ]
initial
begin
	seg_s1_expected[1] = 1'bX;
	seg_s1_expected[1] = #999000 1'b0;
end 
// expected seg_s1[ 0 ]
initial
begin
	seg_s1_expected[0] = 1'bX;
	seg_s1_expected[0] = #999000 1'b0;
end 
// expected seg_s2[ 6 ]
initial
begin
	seg_s2_expected[6] = 1'bX;
	seg_s2_expected[6] = #999000 1'b0;
end 
// expected seg_s2[ 5 ]
initial
begin
	seg_s2_expected[5] = 1'bX;
	seg_s2_expected[5] = #999000 1'b0;
end 
// expected seg_s2[ 4 ]
initial
begin
	seg_s2_expected[4] = 1'bX;
	seg_s2_expected[4] = #999000 1'b0;
end 
// expected seg_s2[ 3 ]
initial
begin
	seg_s2_expected[3] = 1'bX;
	seg_s2_expected[3] = #999000 1'b0;
end 
// expected seg_s2[ 2 ]
initial
begin
	seg_s2_expected[2] = 1'bX;
	seg_s2_expected[2] = #999000 1'b0;
end 
// expected seg_s2[ 1 ]
initial
begin
	seg_s2_expected[1] = 1'bX;
	seg_s2_expected[1] = #999000 1'b0;
end 
// expected seg_s2[ 0 ]
initial
begin
	seg_s2_expected[0] = 1'bX;
	seg_s2_expected[0] = #999000 1'b0;
end 
// expected seg_m1[ 6 ]
initial
begin
	seg_m1_expected[6] = 1'bX;
	seg_m1_expected[6] = #999000 1'b0;
end 
// expected seg_m1[ 5 ]
initial
begin
	seg_m1_expected[5] = 1'bX;
	seg_m1_expected[5] = #999000 1'b0;
end 
// expected seg_m1[ 4 ]
initial
begin
	seg_m1_expected[4] = 1'bX;
	seg_m1_expected[4] = #999000 1'b0;
end 
// expected seg_m1[ 3 ]
initial
begin
	seg_m1_expected[3] = 1'bX;
	seg_m1_expected[3] = #999000 1'b0;
end 
// expected seg_m1[ 2 ]
initial
begin
	seg_m1_expected[2] = 1'bX;
	seg_m1_expected[2] = #999000 1'b0;
end 
// expected seg_m1[ 1 ]
initial
begin
	seg_m1_expected[1] = 1'bX;
	seg_m1_expected[1] = #999000 1'b0;
end 
// expected seg_m1[ 0 ]
initial
begin
	seg_m1_expected[0] = 1'bX;
	seg_m1_expected[0] = #999000 1'b0;
end 
// expected seg_m2[ 6 ]
initial
begin
	seg_m2_expected[6] = 1'bX;
	seg_m2_expected[6] = #999000 1'b0;
end 
// expected seg_m2[ 5 ]
initial
begin
	seg_m2_expected[5] = 1'bX;
	seg_m2_expected[5] = #999000 1'b0;
end 
// expected seg_m2[ 4 ]
initial
begin
	seg_m2_expected[4] = 1'bX;
	seg_m2_expected[4] = #999000 1'b0;
end 
// expected seg_m2[ 3 ]
initial
begin
	seg_m2_expected[3] = 1'bX;
	seg_m2_expected[3] = #999000 1'b0;
end 
// expected seg_m2[ 2 ]
initial
begin
	seg_m2_expected[2] = 1'bX;
	seg_m2_expected[2] = #999000 1'b0;
end 
// expected seg_m2[ 1 ]
initial
begin
	seg_m2_expected[1] = 1'bX;
	seg_m2_expected[1] = #999000 1'b0;
end 
// expected seg_m2[ 0 ]
initial
begin
	seg_m2_expected[0] = 1'bX;
	seg_m2_expected[0] = #999000 1'b0;
end 
// expected seg_h1[ 6 ]
initial
begin
	seg_h1_expected[6] = 1'bX;
	seg_h1_expected[6] = #999000 1'b0;
end 
// expected seg_h1[ 5 ]
initial
begin
	seg_h1_expected[5] = 1'bX;
	seg_h1_expected[5] = #999000 1'b0;
end 
// expected seg_h1[ 4 ]
initial
begin
	seg_h1_expected[4] = 1'bX;
	seg_h1_expected[4] = #999000 1'b0;
end 
// expected seg_h1[ 3 ]
initial
begin
	seg_h1_expected[3] = 1'bX;
	seg_h1_expected[3] = #999000 1'b0;
end 
// expected seg_h1[ 2 ]
initial
begin
	seg_h1_expected[2] = 1'bX;
	seg_h1_expected[2] = #999000 1'b0;
end 
// expected seg_h1[ 1 ]
initial
begin
	seg_h1_expected[1] = 1'bX;
	seg_h1_expected[1] = #999000 1'b0;
end 
// expected seg_h1[ 0 ]
initial
begin
	seg_h1_expected[0] = 1'bX;
	seg_h1_expected[0] = #999000 1'b0;
end 
// expected seg_h2[ 6 ]
initial
begin
	seg_h2_expected[6] = 1'bX;
	seg_h2_expected[6] = #999000 1'b0;
end 
// expected seg_h2[ 5 ]
initial
begin
	seg_h2_expected[5] = 1'bX;
	seg_h2_expected[5] = #999000 1'b0;
end 
// expected seg_h2[ 4 ]
initial
begin
	seg_h2_expected[4] = 1'bX;
	seg_h2_expected[4] = #999000 1'b0;
end 
// expected seg_h2[ 3 ]
initial
begin
	seg_h2_expected[3] = 1'bX;
	seg_h2_expected[3] = #999000 1'b0;
end 
// expected seg_h2[ 2 ]
initial
begin
	seg_h2_expected[2] = 1'bX;
	seg_h2_expected[2] = #999000 1'b0;
end 
// expected seg_h2[ 1 ]
initial
begin
	seg_h2_expected[1] = 1'bX;
	seg_h2_expected[1] = #999000 1'b0;
end 
// expected seg_h2[ 0 ]
initial
begin
	seg_h2_expected[0] = 1'bX;
	seg_h2_expected[0] = #999000 1'b0;
end 

// expected alarme
initial
begin
	alarme_expected = 1'bX;
	alarme_expected = #999000 1'b0;
end 
// generate trigger
always @(alarme_expected or alarme or seg_h1_expected or seg_h1 or seg_h2_expected or seg_h2 or seg_m1_expected or seg_m1 or seg_m2_expected or seg_m2 or seg_s1_expected or seg_s1 or seg_s2_expected or seg_s2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarme = %b | expected seg_h1 = %b | expected seg_h2 = %b | expected seg_m1 = %b | expected seg_m2 = %b | expected seg_s1 = %b | expected seg_s2 = %b | ",alarme_expected_prev,seg_h1_expected_prev,seg_h2_expected_prev,seg_m1_expected_prev,seg_m2_expected_prev,seg_s1_expected_prev,seg_s2_expected_prev);
	$display("| real alarme = %b | real seg_h1 = %b | real seg_h2 = %b | real seg_m1 = %b | real seg_m2 = %b | real seg_s1 = %b | real seg_s2 = %b | ",alarme_prev,seg_h1_prev,seg_h2_prev,seg_m1_prev,seg_m2_prev,seg_s1_prev,seg_s2_prev);
`endif
	if (
		( alarme_expected_prev !== 1'bx ) && ( alarme_prev !== alarme_expected_prev )
		&& ((alarme_expected_prev !== last_alarme_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarme :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarme_expected_prev);
		$display ("     Real value = %b", alarme_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarme_exp = alarme_expected_prev;
	end
	if (
		( seg_h1_expected_prev[0] !== 1'bx ) && ( seg_h1_prev[0] !== seg_h1_expected_prev[0] )
		&& ((seg_h1_expected_prev[0] !== last_seg_h1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[0] = seg_h1_expected_prev[0];
	end
	if (
		( seg_h1_expected_prev[1] !== 1'bx ) && ( seg_h1_prev[1] !== seg_h1_expected_prev[1] )
		&& ((seg_h1_expected_prev[1] !== last_seg_h1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[1] = seg_h1_expected_prev[1];
	end
	if (
		( seg_h1_expected_prev[2] !== 1'bx ) && ( seg_h1_prev[2] !== seg_h1_expected_prev[2] )
		&& ((seg_h1_expected_prev[2] !== last_seg_h1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[2] = seg_h1_expected_prev[2];
	end
	if (
		( seg_h1_expected_prev[3] !== 1'bx ) && ( seg_h1_prev[3] !== seg_h1_expected_prev[3] )
		&& ((seg_h1_expected_prev[3] !== last_seg_h1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[3] = seg_h1_expected_prev[3];
	end
	if (
		( seg_h1_expected_prev[4] !== 1'bx ) && ( seg_h1_prev[4] !== seg_h1_expected_prev[4] )
		&& ((seg_h1_expected_prev[4] !== last_seg_h1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[4] = seg_h1_expected_prev[4];
	end
	if (
		( seg_h1_expected_prev[5] !== 1'bx ) && ( seg_h1_prev[5] !== seg_h1_expected_prev[5] )
		&& ((seg_h1_expected_prev[5] !== last_seg_h1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[5] = seg_h1_expected_prev[5];
	end
	if (
		( seg_h1_expected_prev[6] !== 1'bx ) && ( seg_h1_prev[6] !== seg_h1_expected_prev[6] )
		&& ((seg_h1_expected_prev[6] !== last_seg_h1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h1_expected_prev);
		$display ("     Real value = %b", seg_h1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_h1_exp[6] = seg_h1_expected_prev[6];
	end
	if (
		( seg_h2_expected_prev[0] !== 1'bx ) && ( seg_h2_prev[0] !== seg_h2_expected_prev[0] )
		&& ((seg_h2_expected_prev[0] !== last_seg_h2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[0] = seg_h2_expected_prev[0];
	end
	if (
		( seg_h2_expected_prev[1] !== 1'bx ) && ( seg_h2_prev[1] !== seg_h2_expected_prev[1] )
		&& ((seg_h2_expected_prev[1] !== last_seg_h2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[1] = seg_h2_expected_prev[1];
	end
	if (
		( seg_h2_expected_prev[2] !== 1'bx ) && ( seg_h2_prev[2] !== seg_h2_expected_prev[2] )
		&& ((seg_h2_expected_prev[2] !== last_seg_h2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[2] = seg_h2_expected_prev[2];
	end
	if (
		( seg_h2_expected_prev[3] !== 1'bx ) && ( seg_h2_prev[3] !== seg_h2_expected_prev[3] )
		&& ((seg_h2_expected_prev[3] !== last_seg_h2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[3] = seg_h2_expected_prev[3];
	end
	if (
		( seg_h2_expected_prev[4] !== 1'bx ) && ( seg_h2_prev[4] !== seg_h2_expected_prev[4] )
		&& ((seg_h2_expected_prev[4] !== last_seg_h2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[4] = seg_h2_expected_prev[4];
	end
	if (
		( seg_h2_expected_prev[5] !== 1'bx ) && ( seg_h2_prev[5] !== seg_h2_expected_prev[5] )
		&& ((seg_h2_expected_prev[5] !== last_seg_h2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[5] = seg_h2_expected_prev[5];
	end
	if (
		( seg_h2_expected_prev[6] !== 1'bx ) && ( seg_h2_prev[6] !== seg_h2_expected_prev[6] )
		&& ((seg_h2_expected_prev[6] !== last_seg_h2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_h2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_h2_expected_prev);
		$display ("     Real value = %b", seg_h2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg_h2_exp[6] = seg_h2_expected_prev[6];
	end
	if (
		( seg_m1_expected_prev[0] !== 1'bx ) && ( seg_m1_prev[0] !== seg_m1_expected_prev[0] )
		&& ((seg_m1_expected_prev[0] !== last_seg_m1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[0] = seg_m1_expected_prev[0];
	end
	if (
		( seg_m1_expected_prev[1] !== 1'bx ) && ( seg_m1_prev[1] !== seg_m1_expected_prev[1] )
		&& ((seg_m1_expected_prev[1] !== last_seg_m1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[1] = seg_m1_expected_prev[1];
	end
	if (
		( seg_m1_expected_prev[2] !== 1'bx ) && ( seg_m1_prev[2] !== seg_m1_expected_prev[2] )
		&& ((seg_m1_expected_prev[2] !== last_seg_m1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[2] = seg_m1_expected_prev[2];
	end
	if (
		( seg_m1_expected_prev[3] !== 1'bx ) && ( seg_m1_prev[3] !== seg_m1_expected_prev[3] )
		&& ((seg_m1_expected_prev[3] !== last_seg_m1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[3] = seg_m1_expected_prev[3];
	end
	if (
		( seg_m1_expected_prev[4] !== 1'bx ) && ( seg_m1_prev[4] !== seg_m1_expected_prev[4] )
		&& ((seg_m1_expected_prev[4] !== last_seg_m1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[4] = seg_m1_expected_prev[4];
	end
	if (
		( seg_m1_expected_prev[5] !== 1'bx ) && ( seg_m1_prev[5] !== seg_m1_expected_prev[5] )
		&& ((seg_m1_expected_prev[5] !== last_seg_m1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[5] = seg_m1_expected_prev[5];
	end
	if (
		( seg_m1_expected_prev[6] !== 1'bx ) && ( seg_m1_prev[6] !== seg_m1_expected_prev[6] )
		&& ((seg_m1_expected_prev[6] !== last_seg_m1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m1_expected_prev);
		$display ("     Real value = %b", seg_m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_m1_exp[6] = seg_m1_expected_prev[6];
	end
	if (
		( seg_m2_expected_prev[0] !== 1'bx ) && ( seg_m2_prev[0] !== seg_m2_expected_prev[0] )
		&& ((seg_m2_expected_prev[0] !== last_seg_m2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[0] = seg_m2_expected_prev[0];
	end
	if (
		( seg_m2_expected_prev[1] !== 1'bx ) && ( seg_m2_prev[1] !== seg_m2_expected_prev[1] )
		&& ((seg_m2_expected_prev[1] !== last_seg_m2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[1] = seg_m2_expected_prev[1];
	end
	if (
		( seg_m2_expected_prev[2] !== 1'bx ) && ( seg_m2_prev[2] !== seg_m2_expected_prev[2] )
		&& ((seg_m2_expected_prev[2] !== last_seg_m2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[2] = seg_m2_expected_prev[2];
	end
	if (
		( seg_m2_expected_prev[3] !== 1'bx ) && ( seg_m2_prev[3] !== seg_m2_expected_prev[3] )
		&& ((seg_m2_expected_prev[3] !== last_seg_m2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[3] = seg_m2_expected_prev[3];
	end
	if (
		( seg_m2_expected_prev[4] !== 1'bx ) && ( seg_m2_prev[4] !== seg_m2_expected_prev[4] )
		&& ((seg_m2_expected_prev[4] !== last_seg_m2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[4] = seg_m2_expected_prev[4];
	end
	if (
		( seg_m2_expected_prev[5] !== 1'bx ) && ( seg_m2_prev[5] !== seg_m2_expected_prev[5] )
		&& ((seg_m2_expected_prev[5] !== last_seg_m2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[5] = seg_m2_expected_prev[5];
	end
	if (
		( seg_m2_expected_prev[6] !== 1'bx ) && ( seg_m2_prev[6] !== seg_m2_expected_prev[6] )
		&& ((seg_m2_expected_prev[6] !== last_seg_m2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_m2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_m2_expected_prev);
		$display ("     Real value = %b", seg_m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_m2_exp[6] = seg_m2_expected_prev[6];
	end
	if (
		( seg_s1_expected_prev[0] !== 1'bx ) && ( seg_s1_prev[0] !== seg_s1_expected_prev[0] )
		&& ((seg_s1_expected_prev[0] !== last_seg_s1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[0] = seg_s1_expected_prev[0];
	end
	if (
		( seg_s1_expected_prev[1] !== 1'bx ) && ( seg_s1_prev[1] !== seg_s1_expected_prev[1] )
		&& ((seg_s1_expected_prev[1] !== last_seg_s1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[1] = seg_s1_expected_prev[1];
	end
	if (
		( seg_s1_expected_prev[2] !== 1'bx ) && ( seg_s1_prev[2] !== seg_s1_expected_prev[2] )
		&& ((seg_s1_expected_prev[2] !== last_seg_s1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[2] = seg_s1_expected_prev[2];
	end
	if (
		( seg_s1_expected_prev[3] !== 1'bx ) && ( seg_s1_prev[3] !== seg_s1_expected_prev[3] )
		&& ((seg_s1_expected_prev[3] !== last_seg_s1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[3] = seg_s1_expected_prev[3];
	end
	if (
		( seg_s1_expected_prev[4] !== 1'bx ) && ( seg_s1_prev[4] !== seg_s1_expected_prev[4] )
		&& ((seg_s1_expected_prev[4] !== last_seg_s1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[4] = seg_s1_expected_prev[4];
	end
	if (
		( seg_s1_expected_prev[5] !== 1'bx ) && ( seg_s1_prev[5] !== seg_s1_expected_prev[5] )
		&& ((seg_s1_expected_prev[5] !== last_seg_s1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[5] = seg_s1_expected_prev[5];
	end
	if (
		( seg_s1_expected_prev[6] !== 1'bx ) && ( seg_s1_prev[6] !== seg_s1_expected_prev[6] )
		&& ((seg_s1_expected_prev[6] !== last_seg_s1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s1_expected_prev);
		$display ("     Real value = %b", seg_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_s1_exp[6] = seg_s1_expected_prev[6];
	end
	if (
		( seg_s2_expected_prev[0] !== 1'bx ) && ( seg_s2_prev[0] !== seg_s2_expected_prev[0] )
		&& ((seg_s2_expected_prev[0] !== last_seg_s2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[0] = seg_s2_expected_prev[0];
	end
	if (
		( seg_s2_expected_prev[1] !== 1'bx ) && ( seg_s2_prev[1] !== seg_s2_expected_prev[1] )
		&& ((seg_s2_expected_prev[1] !== last_seg_s2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[1] = seg_s2_expected_prev[1];
	end
	if (
		( seg_s2_expected_prev[2] !== 1'bx ) && ( seg_s2_prev[2] !== seg_s2_expected_prev[2] )
		&& ((seg_s2_expected_prev[2] !== last_seg_s2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[2] = seg_s2_expected_prev[2];
	end
	if (
		( seg_s2_expected_prev[3] !== 1'bx ) && ( seg_s2_prev[3] !== seg_s2_expected_prev[3] )
		&& ((seg_s2_expected_prev[3] !== last_seg_s2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[3] = seg_s2_expected_prev[3];
	end
	if (
		( seg_s2_expected_prev[4] !== 1'bx ) && ( seg_s2_prev[4] !== seg_s2_expected_prev[4] )
		&& ((seg_s2_expected_prev[4] !== last_seg_s2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[4] = seg_s2_expected_prev[4];
	end
	if (
		( seg_s2_expected_prev[5] !== 1'bx ) && ( seg_s2_prev[5] !== seg_s2_expected_prev[5] )
		&& ((seg_s2_expected_prev[5] !== last_seg_s2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[5] = seg_s2_expected_prev[5];
	end
	if (
		( seg_s2_expected_prev[6] !== 1'bx ) && ( seg_s2_prev[6] !== seg_s2_expected_prev[6] )
		&& ((seg_s2_expected_prev[6] !== last_seg_s2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_s2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_s2_expected_prev);
		$display ("     Real value = %b", seg_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_s2_exp[6] = seg_s2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#30000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Top_Level_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] dh;
reg [3:0] dm;
reg enable;
reg mode;
reg reset;
reg start;
reg [3:0] uh;
reg [3:0] um;
// wires                                               
wire alarme;
wire [6:0] seg_h1;
wire [6:0] seg_h2;
wire [6:0] seg_m1;
wire [6:0] seg_m2;
wire [6:0] seg_s1;
wire [6:0] seg_s2;

wire sampler;                             

// assign statements (if any)                          
Top_Level i1 (
// port map - connection between master ports and signals/registers   
	.alarme(alarme),
	.clk(clk),
	.dh(dh),
	.dm(dm),
	.enable(enable),
	.mode(mode),
	.reset(reset),
	.seg_h1(seg_h1),
	.seg_h2(seg_h2),
	.seg_m1(seg_m1),
	.seg_m2(seg_m2),
	.seg_s1(seg_s1),
	.seg_s2(seg_s2),
	.start(start),
	.uh(uh),
	.um(um)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #640000 1'b0;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #960000 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #960000 1'b1;
	start = #320000 1'b0;
end 

// mode
initial
begin
	mode = 1'b0;
end 
// dh[ 3 ]
initial
begin
	dh[3] = 1'b0;
end 
// dh[ 2 ]
initial
begin
	dh[2] = 1'b0;
end 
// dh[ 1 ]
initial
begin
	dh[1] = 1'b0;
end 
// dh[ 0 ]
initial
begin
	dh[0] = 1'b0;
end 
// dm[ 3 ]
initial
begin
	dm[3] = 1'b0;
end 
// dm[ 2 ]
initial
begin
	dm[2] = 1'b0;
end 
// dm[ 1 ]
initial
begin
	dm[1] = 1'b0;
end 
// dm[ 0 ]
initial
begin
	dm[0] = 1'b0;
end 
// uh[ 3 ]
initial
begin
	uh[3] = 1'b0;
end 
// uh[ 2 ]
initial
begin
	uh[2] = 1'b0;
end 
// uh[ 1 ]
initial
begin
	uh[1] = 1'b0;
end 
// uh[ 0 ]
initial
begin
	uh[0] = 1'b0;
end 
// um[ 3 ]
initial
begin
	um[3] = 1'b0;
end 
// um[ 2 ]
initial
begin
	um[2] = 1'b0;
end 
// um[ 1 ]
initial
begin
	um[1] = 1'b1;
end 
// um[ 0 ]
initial
begin
	um[0] = 1'b1;
	um[0] = #999000 1'b0;
end 

Top_Level_vlg_sample_tst tb_sample (
	.clk(clk),
	.dh(dh),
	.dm(dm),
	.enable(enable),
	.mode(mode),
	.reset(reset),
	.start(start),
	.uh(uh),
	.um(um),
	.sampler_tx(sampler)
);

Top_Level_vlg_check_tst tb_out(
	.alarme(alarme),
	.seg_h1(seg_h1),
	.seg_h2(seg_h2),
	.seg_m1(seg_m1),
	.seg_m2(seg_m2),
	.seg_s1(seg_s1),
	.seg_s2(seg_s2),
	.sampler_rx(sampler)
);
endmodule

